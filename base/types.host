
;var Type new!
;set Type.name "Type"
;set Type.type Type
;export Type

fnm type(name args&)
	; new type object
    var t new!
    set t.name : ssym name
    set t.type Type

    ; bind to context
    bind context (ssym name) t 1

    ; add to known types
    push _knownTypes t

    ; processes addtional args
    each args a
    	; if it's the 'fields' arg just set the list
    	if(&& (isList a) (|| (== (ssym a.0) "fields") (== (ssym a.1) "fields")))
    		untick a ; remove tick if it's there
    		shift a  ; remove 'fields' symbol
    		set t.fields a
    		continue!

    	; eval it
		set a : eval a

		; if it's named set it by name
		if(&& (isMeta a) a.name)
			set t.(one a.name) a.value
		else
			; otherwise add it to the list of unnamed values
			; maybe -- throw error
			set t.values (OR t.values list!)
			push t.values a
	t
set type.useRuntimeScope true
export type

return!


fnm primitive(name args&)
    var p new!
    set p.name : ssym name
    set p.type Prim
    bind context (ssym name) _
var prim primitive
export primitive prim

prim Boolean
prim Number
prim String
prim Id

type Any
type Object
type List
type Date
type Fn
type Fnjs

export Boolean Number String Id Any Object List Date Fn Fnjs

; isBoolean in underscore
; isNumber in underscore
; isString in underscore

var isObject : evalJs """
    function(item){
        return _.isObject(item) && !_.isArray(item);
    }
"""
var isList : evalJs """
    function(item){
        return _.isArray(item);
    }
"""
fn isPrimitive(item)
    not : ||
        isObject item
        isList item
var isPrim isPrimitive
var isJsFunction : evalJs """
    function(item){
        return _.isFunction(item);
    }
"""
fn isFnjs(item)
    ||
        == item.type Fnjs
        isJsFunction item

export isObject isList isPrimitive isPrim isFnjs

; isString, isNumber, etc. included with underscorejs

fn isTypePrimitive(type)


fn isType(item type)
    ifnot
        ||
            == type Primitive
            == type Type
        error : list "isType -- type argument must have a type of Type or Primitive. Given: " type

    if(== type Any)
        return true
    if(== type Object)
        return : isObject item
    if(== type List)
        return : isList item
    if(== type Primitive)
        return : isPrimitive item
    false
export isType


