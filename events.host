;load cond
;load logic

set core.eventHandlers (|| core.eventHandlers new!)

;; event: used to define an event
fnm event('name params*)
    var handlers (,)
    ;push handlers log
    var evt
    	apply fn
    		list
	    		params
    	    	' each handlers h
    	    		apply h _args
        		'`_args
    set evt.name name
    bind context name evt 1
    set evt.id newid!
    set core.eventHandlers.(evt.id) handlers
	evt
set event.useRuntimeScope true
export event

;; handle: used to add a handler to an event
fn handle (evt handler)
	core.eventHandlers.(evt.id) >> push handler
	handler
export handle


;; test event and handler
event keydown (key)

var lst (,)
handle keydown
	fn(k)
		push lst (add "handler 1, " k)
handle keydown
	fn(k)
		push lst (add "handler 2, " k)
handle keydown
	fn(k)
		push lst (add "handler 3, " k)

;;; ===
fn rptKey(k hNum) : push lst : add "handler " hNum ", " k
handle keydown : fn(k): rptKey k 1
handle keydown : fn(k): rptKey k 2
handle keydown : fn(k): rptKey k 3
;;;

keydown "A"
keydown "B"
keydown "C"

lst === : evalJs """
[
    "handler 1, A",
    "handler 2, A",
    "handler 3, A",
    "handler 1, B",
    "handler 2, B",
    "handler 3, B",
    "handler 1, C",
    "handler 2, C",
    "handler 3, C"
]
"""
