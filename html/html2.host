
var atom : js """function(value, persistId){
    if(persistId === undefined)
        return obs(value);
    else
        return obsPersist(value, persistId);
}"""
export atom

var atoms : js "ko.observableArray"
export atoms

type Kom
    fields
        name[String]
        view        
export Kom

fnm kom(args&)
    var nk : new Kom
    set nk.context << 
        var ctx : clone context
        >> pop 2
        ctx
    each args a
        if(isMeta a)
            set nk.(one a.name) <<
                newScope nk            
                eval a.value
        else    
            set nk.value : nk.value || (,)
            nk.value.push <<
                newScope nk
                eval a.value    
    nk
set kom.useRuntimeScope true
export kom

var selfClosing : ssyms 
    area 
    base 
    br 
    col 
    command 
    embed 
    hr 
    img 
    input 
    keygen 
    link 
    menuitem 
    meta 
    param 
    source 
    track 
    wbr     

fnm htmlTag(tag attrText="")
    set tag : untick tag
    if attrText
        set attrText : " " + attrText
    if(in tag.toLowerCase! selfClosing)
        + "<" tag attrText "/>"
    else
        + "<" tag attrText "></" tag ">"
export htmlTag


fnm html(tags&)    
    
    ; remove leading '`' in list if it's there    
    set tags : untick tags

    ; first item in the list is treated specially, it will be parent of the rest of the items in the list if it's not a list itself
    var firstTag <<
        deque tags
        >> untick

    ; handel special binding keyword
    var bindText ""
    if(firstTag == "bind")
        reduce tags b m=""
            var value b.value
            if (isList value)
                m + b.name ":$component.bindHost(" (toDataString value) "), "
            elif (isSym value)
                m + b.name ":$component.bindHost('" value "'), "
            elif (isString value)
                m + b.name ":'" value "', "
            else
                m + b.name ":" value ", "
        return : _.substr 0 (_.length - 2)        
    
    ; short circuit for single tag (this ensures selfClosing tags are handled correctly)
    if(tags.length == 0 && (not(isList firstTag)))
        return : apply htmlTag :, firstTag

    ; process the rest of the tags (they will either be siblings or children of the first tag)
    var attrText ""
    reduce tags t m=""
        if(isList t)
            untick t            
            if("bind" == (untick t.0))
                set bindText : bindText + : apply html t
                ""
            else 
                apply html t
        elif (isMeta t)
            set attrText : attrText + " " t.name "=\"" t.value "\""
            ""; return blank for tags
        elif(isSym t)
            set t : untick t
            if(isSym t)
                eval t                        
            else
                apply htmlTag :, t
                ;htmlTag `t ;TODO this should work but it doesn't
        else
            t
        m + _
    >>> var innerTags

    if bindText
        set attrText : attrText + " data-bind=\"" bindText "\""

    ; firstTag parent or sibbling logic
    if(isList firstTag)
        apply html firstTag
        >> + innerTags
    else
        + "<" firstTag attrText ">" innerTags "</" firstTag ">"        
        
    
set html.useRuntimeScope true
set html.closure null
export html

;return!

;;; TESTS ;;;

html h1 
=== "<h1></h1>"

html 
    h1 "test"
=== "<h1>test</h1>"

html
    h1 h2
=== "<h1><h2></h2></h1>"

html
    h1 h2 "test"
=== "<h1><h2></h2>test</h1>"

html 
    h1 h2        
    h3 h4 h5
        h6 h7
        h8 h9 "test"
    label "Hi"
    span "span"
    my-tag    
=== "<h1><h2></h2></h1><h3><h4></h4><h5></h5><h6><h7></h7></h6><h8><h9></h9>test</h8></h3><label>Hi</label><span>span</span><my-tag></my-tag>"

html
    h1 "h1 text"
        h2 "h2 inside h1"
        "more text inside h1"
    h2 "h2 ouside h1"
=== "<h1>h1 text<h2>h2 inside h1</h2>more text inside h1</h1><h2>h2 ouside h1</h2>"

html
    h1 "heading"
    input
=== "<h1>heading</h1><input/>"

html input 
=== "<input/>"

html 
    div
        "enter something"
        br
        input
=== "<div>enter something<br/><input/></div>"

var name "My Name"
html
    h1 `name
=== "<h1>My Name</h1>"

html
    span "test" style="color:red" tabindex=-1
=== """<span style="color:red" tabindex="-1">test</span>"""

var name "My Name"
html
    h1 `name
    span
        style="display:none"
        bind            
            text="hi"
            text2=name
            visible=true
            click=(fn()(log "hi"))
=== """<h1>My Name</h1><span style="display:none" data-bind="text:'hi', text2:$component.bindHost('`name'), visible:true, click:$component.bindHost(["`","`fn",["`"],["`","`log","hi"]])"></span>"""