;; nulls, bools, and numbers
parse "*null undefined true false 1 1.2 -3 10e2 0xFF Infinity *"
=== : evalJs "*
    ['`',['`', null, undefined, true, false, 1, 1.2, -3, 10e2, 0xFF, Infinity]]*"
list null undefined true false 1 1.2 -3 10e2 0xFF Infinity
=== : evalJs "*
    [null, undefined, true, false, 1, 1.2, -3, 10e2, 0xFF, Infinity]*"


;; double quote, triple quote, and escaped characters
list "\t\n\"\u00A9" "*\t\n\"\u00A9*"
=== : evalJs "*
    [
        "\t\n\"©",
        "\\t\\n\\\"\\u00A9"
    ]*"


;; comments mixed in with code
parse "*
	1
	1.2
	3 ;*
	4
	5 *;
	-3
	10e2   ; 1000
	0xFF   ; 255
	6
*"
=== : evalJs "*
[
    "`",
    [
        "`",
        1,
        1.2,
        3,
        -3,
        1000,
        255,
        6
    ]
]
*"


;; strings in comments and comments in strings
null
;* "test" "* test *" *;
; "test" "* test *"
=== null
";test"
=== : evalJs "* ";test" *"
";*test*;"
=== : evalJs "* ";*test*;" *"

;; names and metas
parse "* name 1name2 'name *"
=== : evalJs "*
[
    "`",
    [
        "`",
        "`name",
        1,
        "`name2",
        "`'name"
    ]
]
*"


;; quote and tick
'list
=== : evalJs "* "`list" *"
eval _
=== list
parse " 'list "
=== : evalJs "* ["`", "`'list"] *"
parse " `list "
=== : evalJs "* ["`", "``list"] *"
'list
=== : tick "list"
eval _
=== list
' === "'"
;, 1 2 3 === (list 1 2 3)
' list system_id type_type_id
=== : evalJs "*
    [
        "`",
        "`list",
        "`system_id",
        "`type_type_id"
    ] *"


;; tick and quote by themselves should be returned as is
list ` '
=== : evalJs "* ["`", "'"] *"
list ' ` ` '
=== : evalJs "* ["'", "`", "`", "'"] *"


;; eval -- normal vs tick vs quote
var piName "pi"
list "`" piName `piName 'piName
=== (' "pi" "`pi" "`piName")
=== : evalJs "*
   [
       "`",
       "pi",
       "`pi",
       "`piName"
   ]
*"


;; quote and tick -- any number of leading ones
parse " ``''`'`list "
=== : evalJs "* ["`", "```''`'`list"] *"

; quote -- every time eval is called a quote is removed
''list
eval _ === 'list
eval _ === list


; tick -- eval is called recursively, then the result is returned as ticked
var aSym "sym"
```aSym === (tick (tick (tick "sym")))

var lst (, 1)
``lst === : evalJs "*
[
    "`",
    "`",
    1
]
*"

; only strings and lists can be ticked, anything else is returned as is
````list === list
tick list === list


;; ticked rest param
warn "0_symbol -- ticked rest param shouldn't require two ticks"
``value&
=== : evalJs "*
{
    "name": "value",
    "type": "Meta",
    "isRest": true,
    "isList": true,
    "isTick": true
}
*"

;; test non-standard names
; declare a variable with a non-standard name
var "a name with spaces and crazy characters ☺ set to the value 1" 1
; access the value of that variable
"`a name with spaces and crazy characters ☺ set to the value 1"
=== 1