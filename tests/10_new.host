
; test no args
new!
=== : js "{}"

; test unnamed args
new 1
===: js "{values:[1]}"

; test named args
new name~1
===: js "{name:1}"

; test named and unnamed functions
var obj : new 
    fnp f()"Hello World"
    fnp()"test"
obj.f.ccode.0 === "Hello World"
obj.values.0.ccode.0 === "test"

; test function definition as part of new
var obj : new f~:fnp()"Hello World"
obj.f.ccode.0 === "Hello World"


; test named and unnamed mixed
var obj : new
    name ~ "mark"
    "blah"
    1
    num ~ 1
===: js """
{
    "name": "mark",
    "num": 1,
    "values": [
        "blah",
        1
    ]
}
"""

; test non-list "values" field
var obj : new values~1 1
===: js """
{
    "values": [
        1,
        1
    ]
}
"""

; test list "values" field
var obj : new values~(, 1 2) 3
===: js """
{
    "values": [
        1,
        2,
        3
    ]
}
"""


;;; new2 - "{" ;;;
{! === new!

; name-value pair
{ : num 1
===: js "{num:1}"

; name-expr
{ : num : 1 + 1
===: js "{num:2}"

; complex
{
    n1 1
    n2 : 1 + 1
    name "mark"
    obj : new2
        n3 3
        name2 "archer"
    lst :, 1    
===: js """
{
    "n1": 1,
    "n2": 2,
    "name": "mark",
    "obj": {
        "n3": 3,
        "name2": "archer"
    },
    "lst": [1]
}
"""

; objects and lists
{
    lst :,
        1
        , 1 2 3 
    obj : {
        n1 1
        n2 2
        name "test"
        obj : {
            name "test2"
===: js """
{
    "lst": [
        1,
        [
            1,
            2,
            3
        ]
    ],
    "obj": {
        "n1": 1,
        "n2": 2,
        "name": "test",
        "obj": {
            "name": "test2"
        }
    }
}
"""

; big example
var obj : {
    name "mark"
    lst : , 1 2 3
    obj : {
        subname "archer"
        spouse "Blair"
    bigList : , 1 2 3 4 5 6 
    names : ,
        "Mark"
        "Markus"
        "Aralious"
        "Compadre"
        "Amigo"
        "Archer"
        "Sanchez"
        "Arbolious"
	createDT date! 
>> names
===:, "name" "lst" "obj" "bigList" "names" "createDT"
