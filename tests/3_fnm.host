
;; fnm: function that runs at compile time (eval) vs run time (apply)
fnm hi (name)
	` add "hi " name
set _.closure (,), set _.closure (,), set _._sourceFile null, set _._sourceLine null
=== : evalJs """
{
    "type": "Fn",
    "name": "hi",
    "params": [
        {
            "name": "name",
            "type": "Meta"
        }
    ],
    "ccode": [
        [
            "`",
            "`",
            "`add",
            "hi ",
            "`name"
        ]
    ],
    "closure": [],
    "isMacro": true, "_sourceFile": null, "_sourceLine": null
}
"""

var sayHi : hi mark
copy sayHi
set _.1 "add"
=== : dataFromString """
[
    "`",
    "add",
    "hi ",
    "`mark"
]
"""

var mark "Mark"
eval sayHi
=== "hi Mark"


;; fnm: create function with symbol as string and add to outermost scope
set context.0.hi2 1
hi2 === 1
fnm hi ('aName)
	set context.0.hi2
		fn hi2() : add "hi " aName
hi Mark
context.0.hi2.type === Fn.id
hi2! === "hi Mark"
