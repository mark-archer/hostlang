
;; var: test basic functionality
var name : add "hi " "there!"
name
=== "hi there!"

;; var: return value that was just assigned
var i 1
=== 1

;; var: test error on declaring a variable twice in the same scope
;* this is currently disabled
try
	var i 1
	var i 2
catch (err)
	"error"
=== "error"
*;


;; set: mutates an existing variable's value
var i 1
add i 2
set i _
i === 3

;; set: works for bindings in outer scopes
var i 1
<<
	add i === 1
	set i 2
i === 2


;; rm: removes variables
var i 1
i === 1
>> add i === 2
rm i
try
    add i
catch (e)
    "error"
=== "error"


;; var: test complex names
var "complext name" "someVal"
eval "`complext name"
=== "someVal"


;; don't allow non-string names
try
	var 1 1
catch(err)
	"error"
=== "error"

;; do allow meta's passed into var
var n[Int]
n === : js "*
{
    "name": "n",
    "type": "Meta",
    "value_type": "`Int",
    "isList": false,
    "value": null
}
*"

;; if a meta is passed in use it's value if no third argument is given for a value
var n[Int]~1
n.value === 1

;; if a meta is passed in with a value and a third argument is give, overwrite it's value
var n[Int]~1 2
n.value === 2