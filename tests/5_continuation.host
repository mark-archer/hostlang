
;; test return inside a declared function
fn ccTest (i=0)
	fn ccTest2 (i)
		return (add i 1)
		foo
	ccTest2 (add i 1)
	return _
	foo
ccTest 1
=== 3

;; test return during async evaluation
fn ccTest()
    list
        list 1 2 3
        list 1 2 3
            list 1 2 3(return 4) 5 6
ccTest!
=== 4

;; return: test inside nested if statements
var i 1
fn testRtn()
	if (!= i 2)
		if (== i 1)
			return "foo"
	"bar"
testRtn! === "foo"


;; return: test from inside each
fn testRtn()
	var lst : list 1 2 3
	each lst i
		add i i
		return "inside each"
		log lst
	return "inside fn"
testRtn! === "inside each"



;; return: test inside each and if
fn testRtn()
    var lst (, 1 2 3 4)
    var j 0
    each lst i
        set j i
        if (== i 1)
            return "each: if"
        return "outside if"
    error "didn't return"
testRtn! === "each: if"


;; test exit during async evaluation
fn ccTest()
    list
        list 1 2 3
        list 1 2 3
            list 1 2 3 (exit "get to the choppa!!!") 5 6
ccTest!
error "exit didn't work"
