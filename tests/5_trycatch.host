
;; test tryCatch with error thrown
fn tcTest(i=0)
	try
		error "error thrown"
tcTest 1
===  "error thrown"
fn tcTest(i=0)
	try
		foo
	add i 1
tcTest 1
=== 2


;; test tryCatch with catchCode
fn tcTest(i=0)
	try
		[name="catchCode" value=((err) (one "caught error!"))]
		foo
tcTest 1
=== "caught error!"


;; test try catch
try
	foo
catch (err)
	"caught error"
=== "caught error"


;; test try catch inside a fn
fn testTC()
    try
        foo
    catch (err)
        "caught error"
testTC!
=== "caught error"


;; test try catch outside execution of fn
fn ccTest (i=0)
	fn ccTest2 (i)
		error (add i 1)
		return i
		foo
	ccTest2 (add i 1)
	return _
	foo
try
    ccTest 1
catch (e)
    e
=== 3

;; test try catch with async fn calls
exit _
fn doLst()
    lst
try
	list
		doLst!
		doLst!
catch(e)
	"caught error"


