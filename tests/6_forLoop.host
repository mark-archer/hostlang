
;; for: endNum
var lst (')
for (i 2)
	push lst i
=== : (' 0 1 2)

;; for: startNum endNum
var lst (')
for (i 3 6)
	push lst i
=== : (' 3 4 5 6)


;; for: startNum endNum step
var lst (')
for (i 3 8 2)
	push lst i
=== : (' 3 5 7)


;; for: invalid params list
try
    for 1
        1
catch (e)
    "error"
=== "error"


;; for: empty params list
try
    for ()
        1
catch (e)
    "error"
=== "error"


;; for: invalid iterator name
try
    for (1)
        1
catch (e)
    "error"
=== "error"


;; for: no iterator instructors
try
    for (i)
        1
catch (e)
    "error"
=== "error"


;; for: invalid iterator instructors
try
    for (i false)
        1
catch (e)
    "error"
=== "error"


;; for: too many iterator instructors
try
    for (i 1 1 1 1)
        1
catch (e)
    "error"
=== "error"


;; for: continue and break
var lst (')
for (i 1 5)
	if (== i 2)	continue!
	if (== i 4) break!
	push lst i
lst
=== (' 1 3)


;; for: auto -1 step, 2 args
var lst (,)
for (i 9 7)
	push lst i
=== (, 9 8 7)


;; for: auto -1 step, 1 arg
var lst (,)
for (i -3)
	push lst i
=== (, 0 -1 -2 -3)