;;; TEST ;;; --------------------------------------------------
istype: Any
;; CODE
list
    istype null Any
    istype undefined Any
    istype NaN Any
    istype Infinity Any
    istype 1 Any
    istype 1.1 Any
    istype "a" Any
    istype true Any
    istype (new) Any
    istype () Any
;; PARSE
auto
;; RUN
[
    true,   // null
    true,   // undefined
    true,   // NaN
    true,   // Infinity
    true,   // 1
    true,   // 1.1
    true,   // "a"
    true,   // true
    true,   // Obj
    true    // List
]


;;; TEST ;;; --------------------------------------------------
istype: Num
;; CODE
list
    istype null Num
    istype undefined Num
    istype NaN Num
    istype Infinity Num
    istype 1 Num
    istype 1.1 Num
    istype "a" Num
    istype true Num
    istype (new) Num
    istype () Num
;; PARSE
auto
;; RUN
[
    false,  // null
    false,  // undefined
    false,  // NaN
    true,   // Infinity
    true,   // 1
    true,   // 1.1
    false,  // "a"
    false,  // true
    false,  // Obj
    false   // List
]


;;; TEST ;;; --------------------------------------------------
istype: Int
;; CODE
; base types: Any, Num, Int, Str, Bool, List, Obj
; corner cases: null, undefined, NaN, Infinity
list
    istype null Int
    istype undefined Int
    istype NaN Int
    istype Infinity Int
    istype 1 Int
    istype 1.1 Int
    istype "a" Int
    istype true Int
    istype (new) Int
    istype () Int
;; PARSE
auto
;; RUN
[
    false,  // null
    false,  // undefined
    false,  // NaN
    true,   // Infinity
    true,   // 1
    false,  // 1.1
    false,  // "a"
    false,  // true
    false,  // Obj
    false   // List
]


;;; TEST ;;; --------------------------------------------------
istype: Str
;; CODE
; base types: Any, Num, Int, Str, Bool, List, Obj
; corner cases: null, undefined, NaN, Infinity
list
    istype null Str
    istype undefined Str
    istype NaN Str
    istype Infinity Str
    istype 1 Str
    istype 1.1 Str
    istype "a" Str
    istype true Str
    istype (new) Str
    istype () Str
;; PARSE
auto
;; RUN
[
    false,  // null
    false,  // undefined
    false,  // NaN
    false,  // Infinity
    false,  // 1
    false,  // 1.1
    true,   // "a"
    false,  // true
    false,  // Obj
    false   // List
]


;;; TEST ;;; --------------------------------------------------
istype: Bool
;; CODE
; base types: Any, Num, Int, Str, Bool, List, Obj
; corner cases: null, undefined, NaN, Infinity
list
    istype null Bool
    istype undefined Bool
    istype NaN Bool
    istype Infinity Bool
    istype 1 Bool
    istype 1.1 Bool
    istype "a" Bool
    istype true Bool
    istype (new) Bool
    istype () Bool
;; PARSE
auto
;; RUN
[
    false,  // null
    false,  // undefined
    false,  // NaN
    false,  // Infinity
    false,  // 1
    false,  // 1.1
    false,   // "a"
    true,  // true
    false,  // Obj
    false   // List
]


;;; TEST ;;; --------------------------------------------------
istype: Obj
;; CODE
; base types: Any, Num, Int, Str, Bool, Obj, List
; corner cases: null, undefined, NaN, Infinity
list
    istype null Obj
    istype undefined Obj
    istype NaN Obj
    istype Infinity Obj
    istype 1 Obj
    istype 1.1 Obj
    istype "a" Obj
    istype true Obj
    istype (new) Obj
    istype () Obj
;; PARSE
auto
;; RUN
[
    false,  // null
    false,  // undefined
    false,  // NaN
    false,  // Infinity
    false,  // 1
    false,  // 1.1
    false,  // "a"
    false,  // true
    true,   // Obj
    false   // List
]


;;; TEST ;;; --------------------------------------------------
istype: List
;; CODE
list
    istype null List
    istype undefined List
    istype NaN List
    istype Infinity List
    istype 1 List
    istype 1.1 List
    istype "a" List
    istype true List
    istype (new) List
    istype () List
;; PARSE
auto
;; RUN
[
    false,  // null
    false,  // undefined
    false,  // NaN
    false,  // Infinity
    false,  // 1
    false,  // 1.1
    false,  // "a"
    false,  // true
    false,  // Obj
    true    // List
]


;;; TEST ;;; --------------------------------------------------
istype: List of Ints
;; CODE
;TODO istype (1 2 3) *Int
;; PARSE
auto
;; RUN
null

